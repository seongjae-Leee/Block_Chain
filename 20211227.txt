@ 블록체인 2일차
$ /home/seongjae/workspace/blockChain
$ vi block.js
  //previousHash는 그 전 해쉬값을 통해 블록과 연결하는 것
  //timestamp는 시간계산
  //merkleRoot는 자료구조 쓰면서 나오는거 넣어주는것
  //bit는 용량
  //nonce는 노가다 횟수

▼ 내용
const fs = require('fs')
const merkle = require('merkle')
const cryptoJS = require('crypto-js')

class Block{
constructor(header, body){
        this.header = header
        this.body = body
}
}
class BlockHeader{
        constructor(version, previousHash, timestamp, merkleRoot, bit, nonce){
                this.version = version
                this.preiviousHash = previousHash
                this.timestamp = timestamp
                this.merkleRoot = merkleRoot
                this.bit = bit
                this.nonce = nonce
        }
}

function getVersion(){
        const package = fs.readFileSync("package.json")
        console.log(JSON.parse(package).version)
        return JSON.parse(package).version
}
getVersion()

function createGenesisBlock(){
        const version = getVersion()
        const previousHash = '0'.repeat(64)
        const timestamp = parseInt(Date.now()/1000)
        const body = ['hello blockChain']
        const tree = merkle('sha256').sync(body)
        const merkleRoot = tree.root() || '0'.repeat(64)
        const bit = 0
        const nonce = 0

        console.log("version : %s, timestamp : %d, body : %s", version, timestamp, body)
        console.log("previousHash : %d", previousHash)
        console.log("merkleRoot : %s", merkleRoot.toString('hex'))

        const header = new BlockHeader(version, previousHash, timestamp, body, tree, merkleRoot, bit, nonce)

        return new Block(header, body)
}
createGenesisBlock()
// const block = createGenesisBlock()
// console.log(block)


let Blocks = [createGenesisBlock()]
function getBlocks(){
        return Blocks
}
function getLastBlock(){
        return Blocks[Blocks.length - 1]
}
function createHash(data){
        const {index, version, previousHash, timestamp, merkleRoot, bit, nonce} = data.header
        const blockString = version + previousHash + timestamp[+ merkleRoot + bit + nonce
        const hash = cryptoJs.SHA256(blockString).toString()
                return hash
}
//const block2 = createGenesisBlock()
//const testHash = createHash(block2)
//console.log(testHash)

function nextBlock(bodyData){
  const prevBlock = getLastBlock()
  const version = getVersion()
  const index = prevBlock.header.index + 1
  const previousHash = createHash(prevBlock)
  const timestamp = parseInt(Date.now() / 1000)
  const tree = merkle('sha256').sync(bodyData)
  const merkleRoot = tree.root() || '0'.repeat(64)
  const bit = 0
  const nonce = 0

  const header = new BlockHeader(index, version, preiviousHash, timestamp, merkleRoot, bit, nonce)
  return new Block(header, bodyData)
}
//const block3 = nextBlock(['transaction1'])
//console.log(block1)

function addBlock(bodyData){
  const newBlock = nextBlock(bodyData)
  Blocks.push(newBlock)
}

addBlock(['Transaction1'])
addBlock(['Transaction2'])
addBlock(['Transaction3'])
addBlock(['Transaction4'])
addBlock(['Transaction5'])
console.log(Blocks)

======================================================================================
$ npm i merkle
$ node block.js
$ npm init
$ node block.js -> 결과값 : 1.0.0
- 첫번째 블록 생성하기 (createGenesisBlock)
$ node block.js 로 확인
- 복사해서 연결할 블록 만들어주기
$ cp block.js chainedBlock.js
- 내용 추가해주고
$ 
$ 


========================================================
과제
1. var, const, let 차이점 확인