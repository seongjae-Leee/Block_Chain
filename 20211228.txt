- 검증이 필요한 네가지
  - 블록의 구조가 유효한지?
  - 현재 블록의 인덱스가 이전 블록의 인덱스보다 1만큼 큰지
  - 이전 블록의 해시값과 현재 블록의 이전 해시가 같은지
  - 데이터 필드로부터 계산한 머클루트와 블록 헤더의 머클루트가 동일한지

function isValidBlockStructure(block){
  // type 검사
  typeof(block.header.version) === 'string'
  && typeof(block.header.index) ==== 'number'
  && typeof(block.header.previousHash) ==== 'string'
  && typeof(block.header.timestamp) ==== 'number'
  && typeof(block.header.merkleRoot) ==== 'string'
  && typeof(block.data) ==== 'object'
}

function isValidNewBlock(newBlock, previousBlock){
  if (isValidBlockStructure(newBlock)===false){
    console.log('Invalid Block Structre')
    return false;
  }
  else if (newBlock.header.index !== preiviousBlock.header.index + 1){
    console.log('Invalid Index')
    return false;
  }
  else if (createHash(previousBlock)!==newBlock.header.preiviousHash){
    console.log('Invalid previousHash')
    return false;
  }
  else if ((newBlock.data.length===0 && ('0'.repeat(64) !== newBlock.header.merkleRoot) ||
          newBlock.data.length !== 0 && (merkle("sha256).sync(newBlock.data).root()!==newBlock.header.merkleRoot))){
            console.log('Invalid merkleRoot')
            return false;
          }
  return true;
}

function addBlock(newBlock){
  if (isValidNewBlock(newBlock, getLastBlock())){
    Block.push(newBlock)
    return true;
  }
  return false;
}