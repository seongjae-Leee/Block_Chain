cf) WSL2 를 다운받을 것인가

@@@@@ 서버를 계속 닫고 열고 하기 귀찮아서 아예 restart 명령어를 쉘스크브립트로 만들기
$ vi restartServer.sh
#!/bin/bash
kill -9 `ps -ef | grep httpServer.js | grep node | awk '{print $2}'`
node httpServer.js &

@@@@@ 
$ vi p2pServer.js 에 추가
마지막에 module.exports = { getSockets, connectToPeers } 해놓고
그 위에 message Handler 추가 ▼
const MessageType ={
  QUERY_LATEST:0, // 가지고 있는 가장 최근에(마지막에) 받은 블록을 가져와서 데이터블록에 담아서 보내 달라는...
  QUERY_ALL:1, // 가지고 있는 전부 다 요청해 불러와서 보내 달라는...
  RESPONSE_BLOCKCHAIN:2 // 하나 이상의 블록을 가지고 메세지를 보낼 때는 이 타입으로 보내는 것
}

function initMessageHandler(ws){
  ws.on("message", (data)=>{
    const message = JSON.parse(data) // JSON 타입으로 데이터 분석
    // ▼ 메세지 타입에 따라 각각 다른 반응을 하기 위한 switch 문
    switch(message.type){
      case MessageType.QUERY_LATEST:
        // ▼ 만들어놨던 write 함수로 ws(웹소켓)에 회신하기
        write( ws, responseLatestMsg());
        break;
      case MessageType.QUERY_ALL:
        write( ws, responseAllChainMsg());
        break;
      case MessageType.RESPONSE_BLOCKCHAIN:
        handleBlockChainResponse(message);
        break;
    }
  })
}

function responseLatestMsg(){
  return ({
    "type" : RESPONSE_BLOCKCHAIN, // 회신하는 방식
    "data" : JSON.stringify([getLastBlock()]), // 보낼 블록을 배열 형태 안에 담아서 json 형태로 바꾸기
  })
}

function responseAllChainMsg(){
  return ({
    "type" : RESPONSE_BLOCKCHAIN, // 회신하는 방식은 lastest와 같음
    "data" : JSON.stringify(getBlocks()), // 보낼 블록이 이미 배열 형태이기 때문에 형식만 json으로 바꿔줌
  })
}

function handleBlockChainResponse(){
  아래 90번째 줄에 적혀있음 내용
}

// ▼ 요청을 보내는 함수
function queryAllMsg(){
    return ({
    "type" : QUERY_ALL, // 요청 타입
    "data" : null // 요청을 보내는 것이므로 데이터는 따로 필요가 없다
  })
}
function queryLatestMsg(){
  return ({
    "type" : QUERY_LATEST,
    "data" : null
  })
}

==========================================================
여기까지 됐으면 소켓 여러개 열어놓고 블록 생성한 뒤에 메세지가 주고받을 수 있는지 확인 필요
그럼 우선 workspace 에 폴더를 하나 더 만들어야 함
$ cp -R blockChain/ blockChain2/
$ chown -R seongjae:seongjae blockChain2/
blockChain 에서 restartServer.sh 실행해놓고
blockChain2에 http_port 의 포트를 3002번으로 바꿔주고
blockChain2의 restartServer.js시에는 kill -9 하지 않게 바꿔주고!
blockChain2 디렉토리에서 node httpServer.js & 로 백그라운드에서 돌리고
$ ps -ef로 둘다 잘 돌아가는지 확인하고
$ curl -H "Content-type:application/json" --data "{\"data\" : [\"testblock1111\"]}" http://localhost:3001/mineBlock
$ curl -H "Content-type:application/json" --data "{\"data\" : [\"testblock2222\"]}" http://localhost:3002/mineBlock

$ curl -X GET http://localhost:3001/blocks | python3 -m json.tool
$ curl -X GET http://localhost:3002/blocks | python3 -m json.tool

p2pServer.js 에서 initMessageHandler를  initConnection 함 수 안에 initMessageHandler(ws)의 형태로 넣어준다.

$vi p2pServer.js
responseAllChainMsg 함수 아래에
function handleBlockChainResponse(message){
  const receiveBlocks = JSON.parse(message.data)
  const latestReceiveBlock = receiveBlocks[receiveBlocks.length - 1]
  const latestMyBlock = getLastBlock()

  // 1. 데이터로 받은 블럭 중에 마지막 블럭의 인덱스가 내가 보유 중인 블럭의 인덱스보다 클 때 / 작을 때
  if (latestReceiveBlock.header.index > latestMyBlock.header.index){
    // 이 조건에서는 세가지 정도를 체크해보면 좋다.
    // 받은 마지막 블록의 이전 해시값이 내 마지막 블럭일 때
    if (createHash(latestMyBlock) === latestReceiveBlock.header.preiviousHash){
      if (addBlock(latestReceiveBlock)){
        broadcast(responseLatestMsg()) // broadcast를 한다는건 나와 연결된 모든 노드들한테 요청을 보낸다는 것.
      }
      else{
        console.log("Invalid Block!!!!!!!")
      }
    }
    // 받은 블럭의 전체 크기가 1일 때(블록 하나 받아왔을 때... 즉 GenesisBlock) -> 다른 노드한테 블럭을 달라고 해야 함
    else if (receiveBlocks.length === 1){
      broadcast(queryAllMsg())
    }
    // 내 전체 블록을 다른 블록에 맞춰야 하는 상황 (내 블록체인이 동기화가 많이 뒤쳐져 있을 때)
    else{
      replaceChain(latestReceiveBlock)
    }
  }
  else{
    console.log("its okay to do nothing")
  }
}

그 다음에 queryLatestMsg 함수 아래에
function initErrorHandler(ws){
  ws.on("close", ()=>{closeConnection(ws)})
  ws.on("eroor", ()=>{closeConnection(ws)})  // 에러가 발생해도 닫아줄 것
}
function closeConnection(ws){
  console.log(`Connection close ${ws.url}`)
  sockets.splice(sockets.indexOf(ws), 1) // 해당 웹소캣을 찾아서 초기화
}
위의 두 함수를 만들고 나면  initConnection 함수 안에
initMessageHandler(ws);
initErrorHandler(ws);
함수를 둘 다 넣어준다.
그리고 closeConnection 함수를 정의해서 initErrorHandler 함수에 넣어준다.


==================================================================================
오늘 한거까지 이상없는지 확인하고 
확인했으면 노션 정리


